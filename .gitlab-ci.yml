stages:
  - diff
  - lint
  - unit-tests
  - build
  - e2e-tests
  - e2e_k8s_30
  - e2e_k8s_31
  - e2e_k8s_32
  - e2e_crd_versions
variables:
  KIND: v0.29.0
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  GO_VERSION: "1.24"
  DOCKER_VERSION: "28.1"
diff:
  stage: diff
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'push'
  image:
    name: $CI_REGISTRY_GO/golang:$GO_VERSION
    entrypoint: [ "" ]
  tags:
    - go
  before_script:
    - cd documentation/gen && go run .
  script:
    - test -z "$(git diff 2> /dev/null)" || exit "Documentation is not generated, issue \`cd documentation/gen && go run .\` and commit the result"
    - test -z "$(git ls-files --others --exclude-standard 2> /dev/null)" || exit "Documentation created untracked files, cannot proceed"
diff-crd:
  stage: diff
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'push'
  image:
    name: $CI_REGISTRY_GO/golang:$GO_VERSION
    entrypoint: [ "" ]
  tags:
    - go
  before_script:
    - go version
    - make cr_generate
  script:
    - git diff
    - test -z "$(git diff 2> /dev/null)" || exit "CRD generation was not generated, issue \`make cr_generate\` and commit the result"
    - test -z "$(git ls-files --others --exclude-standard 2> /dev/null)" || exit "CRD generation created untracked files, cannot proceed"
tidy:
  stage: lint
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'push'
  image:
    name: $CI_REGISTRY_GO/golang:$GO_VERSION
    entrypoint: [""]
  tags:
    - go
  script:
    - go mod tidy
    - test -z "$(git diff 2> /dev/null)" || exit 'Go modules not tidied, issue \`go mod tidy\` and commit the result'
gofumpt:
  stage: lint
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'push'
  image:
    name: $CI_REGISTRY_GO/golang:$GO_VERSION
    entrypoint: [""]
  tags:
    - go
  script:
    - make gofumpt
    - test -z "$(git diff 2> /dev/null)" || exit 'Go code not formatted, issue \`make gofumpt\` and commit the result'
golangci_lint:
  stage: lint
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'push'
  image:
    name: $CI_REGISTRY_GO/golang:$GO_VERSION
    entrypoint: [""]
  tags:
    - go
  script:
    - make lint-seq
commit-policy:
  stage: lint
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  image:
    name: $CI_REGISTRY_GO/commit-check:5.1.1
    entrypoint: [""]
  tags:
    - go
  script:
      - /check
unit-tests:
  needs: ["diff", "tidy"]
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'push'
  stage: unit-tests
  image:
    name: $CI_REGISTRY_GO/haproxy-alpine:3.1-go$GO_VERSION
    entrypoint: [""]
  tags:
    - go
  script:
    - go build -v .
    - go test -v ./...
docker-build:
  stage: build
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'push'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  image: $CI_REGISTRY_GO/docker:$DOCKER_VERSION-go$GO_VERSION
  services:
    - name: $CI_REGISTRY_GO/docker:$DOCKER_VERSION-dind
      alias: docker
  tags:
    - go
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY_GO
    - go version
    - docker pull -q $CI_REGISTRY_GO/alpine:3
    - docker image tag $CI_REGISTRY_GO/alpine:3 alpine:3
    - docker pull -q $CI_REGISTRY_GO/golang:$GO_VERSION-alpine
    - docker image tag $CI_REGISTRY_GO/golang:$GO_VERSION-alpine golang:$GO_VERSION-alpine
    - sed -i "s~FROM golang~FROM $CI_REGISTRY_GO/golang~g" "build/Dockerfile"
    - sed -i "s~FROM haproxytech/haproxy-alpine~FROM $CI_REGISTRY_GO/haproxy-alpine~g" "build/Dockerfile"
  script:
    - mkdir -p tar
    - make build
    - docker save -o tar/k8sIC.tar haproxytech/kubernetes-ingress:latest
  artifacts:
    when: on_success
    paths:
      - tar
    expire_in: 60 minutes
.kind_deployment:
  stage: e2e-tests
  retry: 2
  needs: ["diff", "tidy", "docker-build"]
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_PIPELINE_SOURCE == 'push'
    - if: $CI_PIPELINE_SOURCE == 'schedule'
  image: $CI_REGISTRY_GO/docker:$DOCKER_VERSION-go$GO_VERSION
  services:
    - name: $CI_REGISTRY_GO/docker:$DOCKER_VERSION-dind
      alias: docker
  tags:
    - go
  artifacts:
    paths:
      - tar
    expire_in: 1 minutes
    exclude:
      - tar/*
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY_GO
    - docker load -i tar/k8sIC.tar
    - go version
    - go mod download &
    #- docker pull -q $CI_REGISTRY_GO/alpine:3
    #- docker image tag $CI_REGISTRY_GO/alpine:3 alpine:3
    #- docker pull -q $CI_REGISTRY_GO/golang:$GO_VERSION-alpine
    #- docker image tag $CI_REGISTRY_GO/golang:$GO_VERSION-alpine golang:$GO_VERSION-alpine
    - docker pull -q $CI_REGISTRY_GO/haproxytech/http-echo:latest
    - docker image tag $CI_REGISTRY_GO/haproxytech/http-echo:latest haproxytech/http-echo:latest
    - docker pull -q $CI_REGISTRY_GO/haproxytech/proxy-protocol:latest
    - docker image tag $CI_REGISTRY_GO/haproxytech/proxy-protocol:latest haproxytech/proxy-protocol:latest
    - wget -nv -O /usr/local/bin/kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND}/kind-linux-amd64
    - chmod +x /usr/local/bin/kind
    - wget -nv -O /usr/local/bin/kubectl https://dl.k8s.io/release/${KUBECTL}/bin/linux/amd64/kubectl
    - chmod +x /usr/local/bin/kubectl
    - sed -i "s/K8S_VERSION/$K8S_VERSION/g" ".gitlab/kind-config.yaml"
    - sed -i "s/KUBEADM_VER/$KUBEADM_VER/g" ".gitlab/kind-config.yaml"
    - sed -i "s~CI_REGISTRY_GO~$CI_REGISTRY_GO~g" ".gitlab/kind-config.yaml"
    - sed -i "s~FROM golang~FROM $CI_REGISTRY_GO/golang~g" "build/Dockerfile"
    - sed -i "s~FROM haproxytech/haproxy-alpine~FROM $CI_REGISTRY_GO/haproxy-alpine~g" "build/Dockerfile"
    - cat ./.gitlab/kind-config.yaml
    - kind create cluster --name=dev --config=./.gitlab/kind-config.yaml
    - sed -i -E -e "s/localhost|0\.0\.0\.0|127\.0\.0\.1/docker/g" "$HOME/.kube/config"
    - sed -i -E -e "s/localhost|0\.0\.0\.0|127\.0\.0\.1/docker/g" "deploy/tests/e2e/client.go"
    - until kubectl get nodes -o wide;do sleep 2; done
    - kubectl get pods -A
  after_script:
    - kubectl get pods -A
    - kind delete cluster --name=dev
  parallel:
    matrix:
      - TEST_PART: ["parallel", "https", "sequential-1", "sequential-2"]
  script:
    - gotest --version
    - CI_ENV=gitlab deploy/tests/create.sh
    - kubectl get pods -A
    - echo "running make -f Makefile.ci ci-e2e-$TEST_PART tests" && make -f Makefile.ci ci-e2e-$TEST_PART
.kind_deployment_schedules:
  extends: .kind_deployment
  allow_failure: true
e2e_k8s_30:
  stage: e2e_k8s_30
  needs: ["docker-build"]
  variables:
    K8S_VERSION: v1.31.9
    KUBEADM_VER: v1beta3
    KUBECTL: v1.31.0
  extends: .kind_deployment_schedules
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_TYPE == 'weekly' &&  $SCHEDULE_DAY == 'monday'
e2e_k8s_31:
  stage: e2e_k8s_31
  needs: ["docker-build"]
  variables:
    K8S_VERSION: v1.32.5
    KUBEADM_VER: v1beta3
    KUBECTL: v1.32.0
  extends: .kind_deployment_schedules
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_TYPE == 'weekly' &&  $SCHEDULE_DAY == 'tuesday'
e2e_crd_v1:
  stage: e2e_crd_versions
  needs: ["docker-build"]
  variables:
    K8S_VERSION: v1.33.1
    KUBEADM_VER: v1beta3
    KUBECTL: v1.33.1
    CRD_VERSION: v1
  extends: .kind_deployment_schedules
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_TYPE == 'weekly' &&  $SCHEDULE_DAY == 'wednesday'
e2e_k8s_32:
  stage: e2e_k8s_32
  needs: ["docker-build"]
  variables:
    K8S_VERSION: v1.33.1
    KUBEADM_VER: v1beta3
    KUBECTL: v1.33.1
  extends: .kind_deployment
