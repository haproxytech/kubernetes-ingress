name: CI
on: [push, pull_request]
jobs:
  check:
    if: ${{ github.event_name == 'pull_request' }}
    name: HAProxy check commit message
    runs-on: ubuntu-latest
    steps:
      - name: commit-check
        uses: docker://ghcr.io/haproxytech/commit-check:3.0.0
        env:
          API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set the expected Go version
        run: |
          GOMOD_VERSION=$(cat go.mod | grep -i "^go " | sed -e "s/go //g")
          echo "GOMOD_VERSION=${GOMOD_VERSION}" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "${{ env.GOMOD_VERSION }}"
      - name: generating documentation
        run: cd documentation/gen && go run .
      - name: changes
        run: test -z "$(git diff 2> /dev/null)" || exit "Documentation is not generated, issue \`cd documentation/gen && go run .\` and commit the result"
      - name: untracked files
        run: test -z "$(git ls-files --others --exclude-standard 2> /dev/null)" || exit "Documentation created untracked files, cannot proceed"
  tidy:
    name: go mod tidy
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: tidy
        run: go mod tidy
      - name: changes
        run: test -z "$(git diff 2> /dev/null)" || exit "Go modules not tidied, issue \`go mod tidy\` and commit the result"
  lint:
    name: golangci-lint
    needs: ["generate", "tidy"]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: golangci-lint
        uses: docker://ghcr.io/haproxytech/go-linter:1.33
        with:
          args: --timeout 5m
  build:
    name: build
    runs-on: ubuntu-latest
    needs: ["lint"]
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
      id: go
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Get dependencies
      run: |
        go get -v -t -d ./...
    - name: Build
      run: |
        go build -v .
  e2e:
    strategy:
        matrix:
          k8s-version: ['v1.21.1']
    needs: ["build"]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: '^1.17' # The Go version to download (if necessary) and use.
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - uses: engineerd/setup-kind@v0.5.0
      with:
          name: dev
          config: deploy/tests/kind-config.yaml
          image: kindest/node:${{ matrix.k8s-version }}
          version: v0.11.1
    - name: Setup
      run: CI_ENV=github deploy/tests/create.sh
    - name: Run parallel e2e tests
      run: go test ./... -v --tags=e2e_parallel
    - name: Run sequential e2e tests
      run: go test ./... -v -p 1 --tags=e2e_sequential
